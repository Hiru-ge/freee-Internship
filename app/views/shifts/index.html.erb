<div class="shift-page-container <%= @is_owner ? 'owner-mode' : 'employee-mode' %>">
  <h1>シフトページ</h1>


  <!-- シフト表 -->
  <div class="shift-calendar-section">
    <h2>シフト表</h2>
    <p>交代を依頼したい<strong>自分のシフト</strong>をクリックすると、依頼フォームへ遷移します。<br>
    <small class="help-text">※ 黄色で表示されているシフトがクリック可能です</small></p>

    <!-- シフト管理ボタン -->
    <div class="shift-management">
      <button class="button" onclick="goToRequestList()">自分へのリクエスト一覧</button>
      <button class="button" onclick="goToDeletionForm()">欠勤申請</button>
      <button id="shift-add-btn" class="button owner-only hidden" onclick="goToShiftAddForm()">シフト追加依頼</button>
    </div>

    <div class="month-navigation">
      <h3 id="calendar-title"></h3>
      <div class="month-navigation-buttons">
        <button class="button small-button" onclick="prevWeek()"><</button>
        <button class="button small-button" onclick="nextWeek()">></button>
      </div>
    </div>

    <div id="shift-calendar-container">
      <p>シフト情報を読み込んでいます...</p>
    </div>
  </div>

  <!-- 従業員一覧と103万の壁ゲージ（オーナーのみ） -->
  <% if @is_owner %>
  <div id="employee-list-section" class="employee-list-section">
    <h2>全従業員の給与状況</h2>
    <table border="1" class="employee-list">
      <thead>
        <tr>
          <th>従業員名</th>
          <th>給与状況（103万の壁ゲージ）</th>
        </tr>
      </thead>
      <tbody id="employee-list-body">
        <tr><td colspan="2">読み込み中...</td></tr>
      </tbody>
    </table>
  </div>
  <% end %>

  <!-- 個人の103万の壁ゲージ（従業員のみ） -->
  <% unless @is_owner %>
  <div id="personal-gauge-section" class="personal-gauge-section">
    <h2>103万の壁ゲージ <span class="help-text small">※</span></h2>
    <p class="help-text">※このゲージ状態は、すでに入っているシフトをもとに計算されています</p>
    <div class="wage-gauge" id="personal-wage-gauge">
      <div class="gauge-container">
        <div class="gauge-bar">
          <div class="gauge-fill" style="width: 0%"></div>
        </div>
        <div class="gauge-text">読み込み中...</div>
      </div>
    </div>
  </div>
  <% end %>

  <!-- メッセージ表示 -->
  <div id="message" class="message hidden"></div>
</div>

<script>
  var current_employee_id = '<%= @employee_id %>';
  var is_owner = <%= @is_owner %>;
  var calendarYear;
  var calendarMonth;
  var allShiftsData;
  var currentStartDate;
  var daysInMonth;

  // ページ読み込み時の初期化
  document.addEventListener('DOMContentLoaded', function() {
    checkOwnerPermissions();
    loadShifts();
  });

  // オーナー権限チェック
  function checkOwnerPermissions() {

    // コンテナに権限モードのクラスを追加
    var shift_page_container = document.querySelector('.shift-page-container');
    shift_page_container.classList.remove('owner-mode', 'employee-mode');

    if (is_owner) {
      // オーナーの場合：従業員一覧と給与ゲージを表示
      shift_page_container.classList.add('owner-mode');
      document.getElementById('shift-add-btn').style.display = 'inline-block';
      loadEmployeeList();
    } else {
      // 従業員の場合：個人の給与ゲージを表示
      shift_page_container.classList.add('employee-mode');
      document.getElementById('shift-add-btn').style.display = 'none';
      loadPersonalGauge();
    }
  }

  // 従業員一覧の読み込み（オーナーのみ）
  function loadEmployeeList() {
    // 重複実行を防ぐ
    if (window.employeeListLoading) return;
    window.employeeListLoading = true;

    // 従業員一覧の取得
    fetch('<%= shifts_employees_path %>')
      .then(response => response.json())
      .then(employees => {
        var tbody = document.getElementById('employee-list-body');
        tbody.innerHTML = '';

        if (employees && employees.length > 0) {
          employees.forEach(function(employee) {
            var row = document.createElement('tr');
            row.innerHTML =
              '<td>' + employee.display_name + '</td>' +
              '<td><div class="wage-gauge" data-employee-id="' + employee.id + '">' +
              '<div class="gauge-container">' +
              '<div class="gauge-bar"><div class="gauge-fill" style="width: 0%"></div></div>' +
              '<div class="gauge-text">読み込み中...</div>' +
              '</div></div></td>';
            tbody.appendChild(row);
          });
        } else {
          tbody.innerHTML = '<tr><td colspan="2">従業員情報がありません</td></tr>';
        }

        // 従業員一覧の読み込み完了後に給与ゲージを読み込み
        loadWageGauge();
      })
      .catch(error => {
        console.error('従業員一覧取得エラー:', error);
        document.getElementById('employee-list-body').innerHTML = '<tr><td colspan="2">エラーが発生しました</td></tr>';
      });
  }

  // 給与ゲージの読み込み（オーナーのみ）
  function loadWageGauge() {
    // 全従業員の給与データを取得
    fetch('/wages/all_wages')
      .then(response => response.json())
      .then(wages => {
        if (wages && wages.length > 0) {
          wages.forEach(function(wage) {
            updateWageGaugeForEmployee(wage.employee_id, wage);
          });
        } else {
          // 空データ時の表示
          var gauges = document.querySelectorAll('.wage-gauge[data-employee-id]');
          gauges.forEach(function(gauge) {
            var gaugeText = gauge.querySelector('.gauge-text');
            if (gaugeText) {
              gaugeText.innerHTML = 'シフトデータがありません';
            }
          });
        }
      })
      .catch(error => {
        console.error('全従業員給与データ取得失敗:', error);
        // エラー時の表示
        var gauges = document.querySelectorAll('.wage-gauge[data-employee-id]');
        gauges.forEach(function(gauge) {
          var gaugeText = gauge.querySelector('.gauge-text');
          if (gaugeText) {
            gaugeText.innerHTML = 'エラー: 給与データの取得に失敗しました<br>' + error.message;
          }
        });
      });
  }

  // 個人の給与ゲージの読み込み（従業員のみ）
  function loadPersonalGauge() {
    // 読み込み状態を設定
    var gaugeText = document.querySelector('#personal-wage-gauge .gauge-text');
    if (gaugeText) {
      gaugeText.textContent = '読み込み中...';
    }

    // 個人の給与情報を取得
    fetch('/wages/wage_info?employee_id=' + current_employee_id)
      .then(response => response.json())
      .then(wageInfo => {
        updatePersonalWageGauge(wageInfo);
      })
      .catch(error => {
        console.error('給与情報取得エラー:', error);
        if (current_employee_id) { // 実際のIDが設定されている場合のみエラー表示
          document.querySelector('#personal-wage-gauge .gauge-text').textContent = 'エラーが発生しました';
        }
      });
  }

  // シフト情報の読み込み
  function loadShifts() {
    var shift_calendar_container = document.getElementById('shift-calendar-container');
    shift_calendar_container.innerHTML = '<p>シフト情報を読み込んでいます...</p>';

    fetch('<%= shifts_data_path %>')
      .then(response => response.json())
      .then(data => {
        initializeShifts(data);
      })
      .catch(error => {
        console.error('シフト情報取得エラー:', error);
        shift_calendar_container.innerHTML = '<p>シフト情報の取得に失敗しました</p>';
      });
  }

  function initializeShifts(dataFromServer) {
    allShiftsData = dataFromServer;

    calendarYear = allShiftsData.year;
    calendarMonth = allShiftsData.month;
    daysInMonth = new Date(calendarYear, calendarMonth, 0).getDate();

    // 最初の表示範囲を設定（今日の日付を含む週の開始日）
    var now = new Date();
    var today = now.getDate();
    var dayOfWeek = now.getDay(); // 0=日曜日, 1=月曜日, ...

    // 今日を含む週の開始日を計算（月曜日を週の開始とする）
    var startOfWeek = today - (dayOfWeek === 0 ? 6 : dayOfWeek - 1);
    currentStartDate = new Date(now.getFullYear(), now.getMonth(), startOfWeek);

    updateCalendarTitle();
    displayShifts();
  }

  function updateCalendarTitle() {
    var title = document.getElementById('calendar-title');
    title.textContent = calendarYear + '年' + calendarMonth + '月';
  }

  function displayShifts() {
    var titleEl = document.getElementById('calendar-title');
    titleEl.textContent = calendarYear + '年' + calendarMonth + '月';

    var shift_calendar_container = document.getElementById('shift-calendar-container');
    if (!shift_calendar_container) {
      console.error('shift-calendar-container要素が見つかりません');
      return;
    }
    shift_calendar_container.innerHTML = "";

    var table = document.createElement('table');
    table.className = 'shift-calendar';
    var thead = document.createElement('thead');
    var tbody = document.createElement('tbody');

    // ヘッダー行の生成
    var headerRow = document.createElement('tr');
    var nameHeader = document.createElement('th');
    nameHeader.textContent = '従業員名';
    headerRow.appendChild(nameHeader);

    var datesToShow = []; // 表示する日付の配列
    var currentMonth = currentStartDate.getMonth();
    var currentYear = currentStartDate.getFullYear();
    var lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

    // 最後のページかどうかを判定（表示される最後の日が月の最終日以上の場合）
    var lastDayOfDisplayedPeriod = currentStartDate.getDate() + 6;
    var isLastPage = lastDayOfDisplayedPeriod >= lastDayOfMonth;

    if (isLastPage) {
        // 最後のページの場合：その月の最後の7日分を表示
        var startDay = Math.max(1, lastDayOfMonth - 6);
        for (var day = startDay; day <= lastDayOfMonth; day++) {
            datesToShow.push({
                day: day,
                month: currentMonth,
                year: currentYear,
                displayText: day + '日'
            });
            var dayHeader = document.createElement('th');
            dayHeader.textContent = day + '日';
            headerRow.appendChild(dayHeader);
        }
    } else {
        // 通常のページの場合：週の開始日から7日分を表示
        var currentDate = new Date(currentStartDate);
        for(var i = 0; i < 7; i++) {
            var day = currentDate.getDate();
            var month = currentDate.getMonth();
            var year = currentDate.getFullYear();

            // 現在の月内の日付のみ表示（翌月は含めない）
            if (month === currentMonth && year === currentYear) {
                datesToShow.push({
                    day: day,
                    month: month,
                    year: year,
                    displayText: day + '日'
                });
                var dayHeader = document.createElement('th');
                dayHeader.textContent = day + '日';
                headerRow.appendChild(dayHeader);
            }
            currentDate.setDate(currentDate.getDate() + 1);
        }
    }
    thead.appendChild(headerRow);

    // ボディ行の生成
    for (var employeeId in allShiftsData.shifts) {
      var employeeData = allShiftsData.shifts[employeeId];
      var employeeRow = document.createElement('tr');
      var nameCell = document.createElement('td');
      nameCell.textContent = employeeData.name;
      employeeRow.appendChild(nameCell);

      datesToShow.forEach(function(dateInfo) {
        var shiftCell = document.createElement('td');
        var shiftTime = employeeData.shifts[dateInfo.day] || "";
        if (shiftTime) {
          // 自分のシフトのみクリック可能にする
        if (String(employeeId) === String(current_employee_id)) {
          // シフト時間を表示
          shiftCell.textContent = shiftTime;
          shiftCell.style.color = '#ffca28'; // 自分のシフトは黄色で強調
        } else {
          // 他人のシフトはクリック不可
          shiftCell.style.cursor = 'default';
          shiftCell.style.color = '#999'; // グレーアウト
          shiftCell.title = '他の人のシフトはクリックできません';
          shiftCell.textContent = shiftTime;
        }
        } else {
          shiftCell.textContent = '';
        }
        employeeRow.appendChild(shiftCell);
      });
      tbody.appendChild(employeeRow);
    }

    table.appendChild(thead);
    table.appendChild(tbody);
    shift_calendar_container.appendChild(table);

    updatePaginationButtons();
  }

  function updatePaginationButtons() {
    var prevBtn = document.querySelector('.month-navigation .button:first-of-type');
    var nextBtn = document.querySelector('.month-navigation .button:last-of-type');

    // 1日が開始日なら「前へ」を無効化
    if (currentStartDate.getDate() === 1) {
        prevBtn.disabled = true;
        prevBtn.style.opacity = '0.5';
    } else {
        prevBtn.disabled = false;
        prevBtn.style.opacity = '1.0';
    }

    // 最終日が表示範囲に含まれるかチェック
    var lastDayOfDisplayedPeriod = currentStartDate.getDate() + 6;
    var lastDayOfMonth = new Date(currentStartDate.getFullYear(), currentStartDate.getMonth() + 1, 0).getDate();

    // 表示される最後の日が月の最終日以上の場合、「次へ」ボタンを無効化
    if (lastDayOfDisplayedPeriod >= lastDayOfMonth) {
        nextBtn.disabled = true;
        nextBtn.style.opacity = '0.5';
    } else {
        nextBtn.disabled = false;
        nextBtn.style.opacity = '1.0';
    }
  }

  function prevWeek() {
    if (currentStartDate.getDate() > 1) {
        currentStartDate.setDate(currentStartDate.getDate() - 7);
        displayShifts();
    }
  }

  function nextWeek() {
    var nextWeekStart = new Date(currentStartDate);
    nextWeekStart.setDate(currentStartDate.getDate() + 7);

    // 次の週の開始日が月の最終日を超えていないかチェック
    if (nextWeekStart.getMonth() === currentStartDate.getMonth()) {
      currentStartDate = nextWeekStart;
      displayShifts();
    } else {
      // 月をまたぐ場合は何もしない（翌月は表示しない）
      // 最後のページではその月の最後の7日分のみを表示
    }
  }

  function startRequestForShift(employeeId, day, timeString) {
    // 自分のシフトかどうか再確認
    if (String(employeeId) !== String(current_employee_id)) {
      if (window.messageHandler) {
        window.messageHandler.show("他の人のシフトはクリックできません。自分のシフトのみ交代依頼が可能です。", "warning");
      } else {
        alert("他の人のシフトはクリックできません。");
      }
      return;
    }

    var times = timeString.split('-');
    var startTime = times[0].padStart(2, '0') + ':00';
    var endTime = times[1].padStart(2, '0') + ':00';

    var monthStr = String(calendarMonth).padStart(2, '0');
    var dayStr = String(day).padStart(2, '0');
    var dateStr = calendarYear + '-' + monthStr + '-' + dayStr;

    var baseUrl = '<%= new_shift_exchange_path %>';
    var params = '?applicant_id=' + encodeURIComponent(employeeId) +
                '&date=' + encodeURIComponent(dateStr) +
                '&start=' + encodeURIComponent(startTime) +
                '&end=' + encodeURIComponent(endTime);
    window.location.href = baseUrl + params;
  }

  // 欠勤申請フォームに遷移する関数
  function goToDeletionForm() {
    window.location.href = '<%= new_shift_deletion_path %>';
  }


  // ナビゲーション関数
  function goToRequestList() {
    window.location.href = '<%= shift_approvals_path %>';
  }

  function goToShiftAddForm() {
    window.location.href = '<%= new_shift_addition_path %>';
  }

  // 個人の給与ゲージの更新
  function updatePersonalWageGauge(wageInfo) {
    var gaugeElement = document.getElementById('personal-wage-gauge');
    if (!gaugeElement) return;

    var gaugeFill = gaugeElement.querySelector('.gauge-fill');
    var gaugeText = gaugeElement.querySelector('.gauge-text');

    if (!wageInfo || wageInfo.wage === undefined || wageInfo.target === undefined) {
      gaugeText.textContent = 'データがありません';
      return;
    }

    var percentage = Math.min(wageInfo.percentage, 100);
    var wageFormatted = (wageInfo.wage / 10000).toFixed(1) + '万円';
    var targetFormatted = (wageInfo.target / 10000).toFixed(0) + '万円';

    // ゲージの幅を更新
    gaugeFill.style.width = percentage + '%';

    // 色を更新（GASと同じロジック）
    if (percentage >= 100) {
      gaugeFill.style.backgroundColor = '#ff4444'; // 赤
      gaugeText.innerHTML = wageFormatted + ' / ' + targetFormatted + '<br>🎉 目標達成！';
    } else if (percentage >= 80) {
      gaugeFill.style.backgroundColor = '#ffaa44'; // オレンジ
      gaugeText.innerHTML = wageFormatted + ' / ' + targetFormatted + '<br>あと' + ((wageInfo.target - wageInfo.wage) / 10000).toFixed(1) + '万円';
    } else {
      gaugeFill.style.backgroundColor = '#44ff44'; // 緑
      gaugeText.innerHTML = wageFormatted + ' / ' + targetFormatted + '<br>あと' + ((wageInfo.target - wageInfo.wage) / 10000).toFixed(1) + '万円';
    }
  }

  // 給与ゲージの更新（従業員指定）
  function updateWageGaugeForEmployee(employeeId, wageInfo) {
    var gaugeElement = document.querySelector('.wage-gauge[data-employee-id="' + employeeId + '"]');
    if (!gaugeElement) {
      return;
    }

    var gaugeFill = gaugeElement.querySelector('.gauge-fill');
    var gaugeText = gaugeElement.querySelector('.gauge-text');

    var percentage = Math.min(wageInfo.percentage, 100);
    var wageFormatted = (wageInfo.wage / 10000).toFixed(1) + '万円';
    var targetFormatted = (wageInfo.target / 10000).toFixed(0) + '万円';

    // ゲージの幅を更新
    gaugeFill.style.width = percentage + '%';

    // 色を更新（GASと同じロジック）
    if (percentage >= 100) {
      gaugeFill.style.backgroundColor = '#ff4444'; // 赤
      gaugeText.innerHTML = wageFormatted + ' / ' + targetFormatted + '<br>🎉 目標達成！';
    } else if (percentage >= 80) {
      gaugeFill.style.backgroundColor = '#ffaa44'; // オレンジ
      gaugeText.innerHTML = wageFormatted + ' / ' + targetFormatted + '<br>あと' + ((wageInfo.target - wageInfo.wage) / 10000).toFixed(1) + '万円';
    } else {
      gaugeFill.style.backgroundColor = '#44ff44'; // 緑
      gaugeText.innerHTML = wageFormatted + ' / ' + targetFormatted + '<br>あと' + ((wageInfo.target - wageInfo.wage) / 10000).toFixed(1) + '万円';
    }
  }

  // メッセージ表示
  function showMessage(message, type) {
    var messageDiv = document.getElementById('message');
    messageDiv.textContent = message;
    messageDiv.className = 'message ' + type;
    messageDiv.style.display = 'block';

    // 3秒後にメッセージを非表示
    setTimeout(function() {
      messageDiv.style.display = 'none';
    }, 3000);
  }
</script>

<!-- CSSは外部ファイルに分離済み -->
