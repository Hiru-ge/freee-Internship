<div class="container">
  <div class="login-container">
    <h1>勤怠管理システム</h1>
    <h2>初回パスワード設定</h2>
    
    <div id="email-verification-section">
      <p>登録されているメールアドレスに認証コードを送信します。</p>
      
      <%= form_with url: send_verification_code_auth_path, method: :post, local: false, id: "email-verification-form" do |form| %>
        <div class="form-group">
          <%= form.label :employee_id, "従業員を選択してください:" %>
          <%= form.select :employee_id, 
              options_for_select(@employees.map { |emp| [emp[:display_name], emp[:employee_id]] }, params[:employee_id]),
              { prompt: "-- 従業員を選択 --" },
              { required: true, id: "employee-select" } %>
        </div>
        
        <div class="form-actions">
          <%= form.submit "認証コードを送信", class: "button" %>
        </div>
      <% end %>
    </div>
    
    <div id="verification-code-section" style="display: none;">
      <p>メールアドレスに送信された認証コードを入力してください。</p>
      
      <%= form_with url: verify_code_auth_path, method: :post, local: false, id: "verification-form" do |form| %>
        <div class="form-group">
          <%= form.label :code, "認証コード:" %>
          <%= form.text_field :code, required: true, maxlength: 6, id: "verification-code" %>
        </div>
        
        <div class="form-actions">
          <%= form.submit "認証", class: "button" %>
          <button type="button" class="button" onclick="backToEmailForm()">戻る</button>
        </div>
      <% end %>
    </div>
    
    <div id="password-setup-section" style="display: none;">
      <p>認証コードを正しく認識できました。パスワードを設定してください。</p>
      
      <%= form_with url: auth_initial_password_path, method: :post, local: true, id: "password-setup-form" do |form| %>
        <%= form.hidden_field :employee_id, id: "hidden-employee-id" %>
        <%= form.hidden_field :verification_code, id: "hidden-verification-code" %>
        
        <div class="form-group">
          <%= form.label :password, "新しいパスワード:" %>
          <%= form.password_field :password, required: true, id: "new-password" %>
          <div class="password-requirements">
            <small>パスワード要件:</small>
            <ul>
              <li>8文字以上</li>
              <li>英字と数字を含む</li>
              <li>特殊文字を含む（推奨）</li>
            </ul>
          </div>
        </div>
        
        <div class="form-group">
          <%= form.label :confirm_password, "パスワード（確認）:" %>
          <%= form.password_field :confirm_password, required: true, id: "confirm-password" %>
        </div>
        
        <div class="form-actions">
          <%= form.submit "パスワードを設定", class: "button" %>
          <button type="button" class="button" onclick="backToVerification()">戻る</button>
        </div>
      <% end %>
    </div>
    
  </div>
</div>

<script>
  var currentEmployeeId = null;
  var verificationCode = null;
  
  // ページ読み込み時の初期化
  document.addEventListener('DOMContentLoaded', function() {
    setupFormHandlers();
  });
  
  // フォームハンドラーの設定
  function setupFormHandlers() {
    // メール認証フォーム
    document.getElementById('email-verification-form').addEventListener('submit', function(e) {
      e.preventDefault();
      sendVerificationCode();
    });
    
    // 認証コードフォーム
    document.getElementById('verification-form').addEventListener('submit', function(e) {
      e.preventDefault();
      verifyCode();
    });
    
    // パスワード設定フォーム
    document.getElementById('password-setup-form').addEventListener('submit', function(e) {
      e.preventDefault();
      setupPassword();
    });
  }
  
  // 認証コード送信
  function sendVerificationCode() {
    var employeeId = document.getElementById('employee-select').value;
    
    if (!employeeId) {
      showMessage('従業員を選択してください', 'error');
      return;
    }
    
    currentEmployeeId = employeeId;
    
    var formData = new FormData();
    formData.append('employee_id', employeeId);
    
    fetch('<%= send_verification_code_auth_path %>', {
      method: 'POST',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showMessage('認証コードを送信しました。メールをご確認ください。', 'success');
        document.getElementById('email-verification-section').style.display = 'none';
        document.getElementById('verification-code-section').style.display = 'block';
      } else {
        showMessage(data.message || '認証コードの送信に失敗しました', 'error');
      }
    })
    .catch(error => {
      console.error('認証コード送信エラー:', error);
      showMessage('認証コードの送信に失敗しました', 'error');
    });
  }
  
  // 認証コード検証
  function verifyCode() {
    var inputCode = document.getElementById('verification-code').value;
    
    if (!inputCode) {
      showMessage('認証コードを入力してください', 'error');
      return;
    }
    
    var formData = new FormData();
    formData.append('employee_id', currentEmployeeId);
    formData.append('code', inputCode);
    
    fetch('<%= verify_code_auth_path %>', {
      method: 'POST',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        verificationCode = inputCode;
        // メッセージをクリア
        clearMessage();
        document.getElementById('verification-code-section').style.display = 'none';
        document.getElementById('password-setup-section').style.display = 'block';
      } else {
        showMessage(data.message || '認証コードが正しくありません', 'error');
      }
    })
    .catch(error => {
      console.error('認証エラー:', error);
      showMessage('認証に失敗しました', 'error');
    });
  }
  
  // パスワード設定
  function setupPassword() {
    var password = document.getElementById('new-password').value;
    var confirmPassword = document.getElementById('confirm-password').value;
    
    // バリデーション
    if (!validatePassword(password)) {
      showMessage('パスワードが要件を満たしていません', 'error');
      return;
    }
    
    if (password !== confirmPassword) {
      showMessage('パスワードが一致しません', 'error');
      return;
    }
    
    if (!currentEmployeeId) {
      showMessage('従業員IDが設定されていません', 'error');
      return;
    }
    
    if (!verificationCode) {
      showMessage('認証コードが設定されていません', 'error');
      return;
    }
    
    // 隠しフィールドに値を設定
    document.getElementById('hidden-employee-id').value = currentEmployeeId;
    document.getElementById('hidden-verification-code').value = verificationCode;
    
    // フォームを送信
    document.getElementById('password-setup-form').submit();
  }
  
  // パスワードバリデーション
  function validatePassword(password) {
    if (password.length < 8) return false;
    if (!/[a-zA-Z]/.test(password)) return false;
    if (!/[0-9]/.test(password)) return false;
    return true;
  }
  
  // フォーム表示の切り替え
  function backToEmailForm() {
    document.getElementById('verification-code-section').style.display = 'none';
    document.getElementById('email-verification-section').style.display = 'block';
    currentEmployeeId = null;
  }
  
  function backToVerification() {
    document.getElementById('password-setup-section').style.display = 'none';
    document.getElementById('verification-code-section').style.display = 'block';
  }
  
  // メッセージ表示（統一されたシステムを使用）
  function showMessage(message, type) {
    if (window.messageHandler) {
      return window.messageHandler.show(message, type);
    } else {
      // フォールバック（統一システムが利用できない場合）
      clearMessage();
      
      var messageDiv = document.createElement('div');
      messageDiv.className = 'message ' + type;
      messageDiv.textContent = message;
      
      var container = document.querySelector('.login-container');
      container.appendChild(messageDiv);
    }
  }
  
  // メッセージクリア
  function clearMessage() {
    var existingMessage = document.querySelector('.message');
    if (existingMessage) {
      existingMessage.remove();
    }
  }
</script>